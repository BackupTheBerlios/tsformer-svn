####### PARSE THE COMMAND LINE ARGUMENTS
function parse_arguments() {
	if [ "$#" -gt 0 ]; then
		while [ "$#" -gt 0 ]; do
			case "$1" in
				'--help'|'-help'|'--usage'|'-usage'|'-h'|'')
					PRINT_Help
					PRINT_Debug
					exit 0
					;;

				'--profile')
					# define the output profile
					if [ ! "$2" ]; then
						info "Profile not defined!"
						flush_values
						exit 1
					fi
					profile="${2}"
					shift 2
					;;

				'--xml')
					# generate xml
					usexml=1
					output_mode="xml"
					shift 1
					;;

				'--html')
					# generate a html page of the output
					usexml=1
					output_mode="xml"
					makehtml=1
					quiet=1
					shift 1
					;;

				'-o'|'--output')
					# direct output to a named file
					if [ $2 ]; then
						usexml=1
						XMLFILE="${2}"
						shift 2
					else
						missing_arg "$1"
					fi
					;;

				'--lanforce')
					# use a special xml format
					usexml=1
					lanforce=1
					output_mode="lanforce_xml"
					shift 1
					;;

				'--tcpsend'|'--netcat')
					# send xml via tcp to remote osinfo daemon
					if [ "$2" ] && [ "$3" ]; then
						usexml=1
						makehtml=0
						tcpsend=1
						output_mode="xml"
						HOST="$2"
						PORT="$3"
						shift 3
					else
						echo "You must set the target host and port!"
						missing_arg "$1" 2
					fi
					;;

				'--listen')
					# listen for incoming tcp connections,
					# receive xml sheet from osinfo clients
					tcpdaemon=1
					makehtml=1

					if [ "$2" ]; then
						tcp_listening_port="$2"
						shift 2

					elif [ ! "$tcp_listening_port" ]; then
						info "You must set the listening port!"
						flush_values
						exit 1

					# the tcp port may be given at the conf file
					else
						shift 1
					fi
					;;

				'--Xorglog')
					# read Xorg detected values from this file
					# (by default /var/log/Xorg.0.log)
					if [ "$2" ]; then
						if [ ! -e "${2}" ]; then
							echo "File $2 does not exist!"
							exit 1
						fi
						XORG_LOG="${2}"
						shift 2
					else
						echo "Please give Xorg log input file!"
						missing_arg "$1" 1
					fi
					;;

				'--no-color'|'--no-colour'|'--nocolor'|'--nocolour')
					no_fancy=1
					# clear color codes; set empty values
					tSTD='' ; tBOLD='' ; tcBLACK='' ; tcWHITE='' ; tcRED='' ; tcGREEN=''
					tcYELLOW='' ; tcBLUE='' ; tcMAGENTA='' ; tcCYAN=''
					shift 1
					;;

				'-P'|'--prefix')
					# define the root dir
					if [ $2 ]; then
						# Make sure there is only one ending "/".
						prefix="$(echo $2 | sed 's/\/*$/\//')"
						shift 2
					else
						missing_arg "$1"
					fi
					;;

				'--kdialog')
					# print output in kdialog window
					usekdialog=1
					output_mode="kdialog"
					shift 1
					;;

				'-v'|'--verbose')
					isverbose=1
					shift 1
					;;

				'-vv'|'--very-verbose')
					isverbose=2
					shift 1
					;;

				'-d'|'--debug')
					# standard debugging option
					export isdebug=1
					shift 1
					;;

				'-D'|'--fulldebug')
					# over-the-board debug option
					export isdebug=1
					set -x
					shift 1
					;;

				'--dev')
					# the developement option to debug stuff
					export dev_code=1
					shift 1
					;;

				'--fake')
					# for faking input from files to debug stuff, for example
					# LVM drives when no such drives are available
					export fake=1
					shift 1
					;;

				'--quiet'|'-q')
					# no not print anything to stdout
					quiet=1
					shift 1
					;;

				'-V'|'--version')
					PRINT_Version
					exit 0;
					;;

				'--checkdeps')
					check_dependencies
					exit 0
					;;

				'--htmldebug')
					hostdir="html/hosts"
					usexml=1
					create_indexxml > "index.xml"
					update_sidebar > "sidebar.html"
					cat index.xml
					exit 0
					;;

				*)
					module_cmds="$module_cmds $1"
					shift 1;
					;;
			esac
		done
	else
		PRINT_Usage
	fi
}
