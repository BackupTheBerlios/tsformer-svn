#!/bin/bash
# functions for tsformer


function PRINT_ts2vob_Info {
	eval_gettext $"TS2VOB - transport stream to vob converter, with support for DVB subtitles." ; echo
	eval_gettext $"This is free software; version " echo $VERSION ; echo 
}


function PRINT_ts2vob_Help {
	echo -e $"Usage:\t\$ ts2vob -i input\ file.ts -o \"output filename\""
	echo
	echo "If the input\ file.ts is already demuxed, as you might have cut it with the projectx GUI,"
	echo "the script looks for the demuxed files in the same directory as the input file."
	echo "If -o defines a directory, it will be used to store temporary files."
	echo
	echo "The subtitles have to be in .sup format. If they exist in the .ts, they will be merged into the .vob."
	echo
	exit 0
}


function ParseArgs {
	if [ "${#}" -gt 0 ]; then # there are arguments to the command
	  while [ "${#}" -gt 0 ]; do
		case "$1" in
			'--help'|'-help'|'--usage'|'-usage'|'-h'|'')
			PRINT_ts2vob_Help
			;;
			'-i'|'--input')
		  if [ "$2" ]; then
			INPUT=$2 
			shift 2
		  else
			echo $"switch $1: missing input file"
			exit 0;
		  fi
			;;
			'-o'|'--output')
		  if [ "$2" ]; then
			OUTPUT="$2"
			shift 2
		  else
			echo $"switch $1: missing output file"
			exit 0;
		  fi
			;;
		 '--mv'|'--move')
		   move=1
		   shift 1
		   ;;
		 '--rm'|'--delete'|'--remove')
		   delete=1
		   shift 1
		   ;;
		 '--verbose'|'-v')
		   isverbose=1
		   shift 1
		   ;;
		 '--version')
		PRINT_ts2vob_Info
		   exit 0;
		   ;;
			*)
				INPUT="$1"
				echo -n ${tcYELLOW}
				eval_gettext $ "Argument -i wasn't set, using \$1 as input file"
				echo ${tSTD}
				shift 1;
			;;
	   esac
	done
	else
		PRINT_ts2vob_Help
	fi

	SUFFIX="$(echo $INPUT | awk -F. {'print $NF'})"
	if [ "${#SUFFIX}" -gt 4 ]; then # that's probably basename, user didn't give full filename
	    unset SUFFIX
	else
	    SUFFIX=".$SUFFIX" # add a dot for basename evaluation
	fi
	
	# deducing if the input file is relative or absolute
	if [ "$(echo $INPUT | head -c1)" != "/" ]; then
	 INPUT=$(pwd)/${INPUT};
	fi
	
	# parse the basedir for input $var with ${var%/*}/ , here $var = $input
	if [ ! "$(type -p dirname)" ]; then
	 BASEDIR=${INPUT%/*}
	else
	 BASEDIR=$(dirname "${INPUT}")
	fi
	
	INPUT_FILENAME=$(basename "${INPUT}" $SUFFIX)
	
	# if $OUTPUT is blank, set it to the input basename
	if [ ! "${OUTPUT}" ]; then
#		echo -ne "  [${tBOLD}${tcYELLOW}!!${tSTD}]\t"
#		eval_gettext $"Output filename is not set, using " ; echo ${INPUT_FILENAME}
		OUTPUT="${INPUT_FILENAME}";
	fi
	
	TRASH="${BASEDIR}/${TRASHDIR}/"

	LOGFILE="${LOGDIR}/ts2vob.log"
}


# CheckDeps()
function CheckDeps {
	DEPFAIL=0;
	echo "Checking dependencies.."

	# check all needed programs
	if [ ! "$(type -p projectx)" ]; then
		eval_gettext projectx
		return 1;
		DEPFAIL=1;
	else
		status_ok ; echo projectx
	fi
	if [ ! "$(type -p tcmplex-panteltje)" ]; then
		status_err; echo tcmplex-panteltje
		DEPFAIL=1;
	fi
	if [ ! "$(type -p dvdauthor)" ]; then
		errmsg dvdauthor
		DEPFAIL=1;
	fi
	if [ ! "$(type -p dirname)" ]; then
		errmsg dirname
		DEPFAIL=1;
	fi
	if [ ! "$(type -p pxsup2dast)" ]; then
		errmsg pxsup2dast
		echo "pxsup2dast can be found at http://www.guru-group.fi/~too/sw/m2vmp2cut/pxsup2dast.c"
		DEPFAIL=1;
	fi
	if [ ! "$(type -p iconv)" ]; then
		errmsg iconv
		DEPFAIL=1;
	fi

	if [ $DEPFAIL -eq 1 ]; then
		echo -n ${tcRED}
		eval_gettext $"CRITICAL DEPENDENCIES ARE MISSING, EMERGE ;-)"
		echo ${tSTD};
		exit 1
	fi
}


# clean()
function clean {
	# TODO: other things here too...
	if [ "$move" == 1 ]; then
		mv "${INPUT}" ${TRASH} && \
		echo -ne "  [${tcGREEN}!!${tSTD}]\t" && \
		eval_gettext $"Input file moved to " ; echo ${TRASH}
	elif [ "$delete" == 1 ]; then
		rm -f "${INPUT}" && \
		echo -ne "  [${tcGREEN}OK${tSTD}]\t" && \
		eval_gettext $"Input file removed" ; echo
	fi
}


# process_Subtitles()
function process_Subtitles {
	if [ -e "${DEMUXED}.sup" ]; then # subtitles found

		status_ok
		eval_gettext $"Subtitles found, processing" ; echo

		# use pxsup2dast to convert the .sup subtitles into a format
		# that can be used by later processes
		pxsup2dast "${DEMUXED}.sup" "${DEMUXED}.sup.IFO" &> ${LOGFILE}
		iconv "${DEMUXED}.d/spumux.xml" -t UTF-8 > "${DEMUXED}.d/spumux-utf8.xml"

		local success=0

		# mux the subs into the vob and finalize, CLEAN UP TEMP FILES ############
		# spumux -v $VERBOSITY "${DEMUXED}.d/spumux-utf8.xml" < "${WORKDIR}/${OUTPUT}.vob" > "${FINALDIR}"/"${OUTPUT}.vob" 2&>${LOGFILE} && \
		spumux -v $VERBOSITY "${DEMUXED}.d/spumux-utf8.xml" < "${WORKDIR}/${OUTPUT}.vob" > "${FINALDIR}"/"${OUTPUT}.vob" 2>> "${LOGFILE}" && success=1
		if [ $success -eq 1 ]; then
			status_ok 
			tail "${LOGFILE}" | grep added | grep -Eo '[0-9]+ subtitles [a-zA-Z0-9, ]+skipped'
			status_ok 
			eval_gettext $"Output can be found at ";  echo "$FINALDIR/$OUTPUT.vob"

			# cleanup
			rm "${WORKDIR}/${OUTPUT}.vob" -f 
			rm "${DEMUXED}.m2v" -f
			rm "${DEMUXED}.mp2" -f 
			mv "${DEMUXED}.sup" "${DEMUXED}.sup.IFO" "${DEMUXED}.d/" ${LOGDIR}
			mv "${DEMUXED}_log.txt" "${LOGDIR}"
		fi

	else

		status_warn
		eval_gettext $"Subtitles not found" ; echo
		if mv "${WORKDIR}/${OUTPUT}.vob" "${FINALDIR}" ; then

			status_ok 
			eval_gettext $"Output can be found at " ; echo "$FINALDIR/$OUTPUT.vob" 
			rm "${DEMUXED}.m2v" -f
			rm "${DEMUXED}.mp2" -f 
			mv "${DEMUXED}_log.txt" "${LOGDIR}"
		fi
	fi
}


# multiplex()
function multiplex {
	cd ${WORKDIR}
	status_ok
	eval_gettext $"Muxing input to " ; echo "${WORKDIR}/${OUTPUT}.vob"
	tcmplex-panteltje -i "${DEMUXED}.m2v" -p "${DEMUXED}.mp2" \
		-m d -d $VERBOSITY -o "${WORKDIR}/${OUTPUT}.vob" 2>&1 | grep '^\*'  &> ${LOGFILE}
}


# demux()
# deduces if the input file has already been demuxed, or demuxes it with projectX.
function demux {
	if [ -e "${BASEDIR}/${INPUT_FILENAME}.m2v" ]; then # the file has been demuxed 
		DEMUXED="${BASEDIR}/${INPUT_FILENAME}";
		status_ok
		eval_gettext $"Seems you've already demuxed the input to " ; echo "${BASEDIR}"

	elif [[ -e "${WORKDIR}"/"${INPUT_FILENAME}.m2v" ]]; then 
		DEMUXED="${WORKDIR}"/"${INPUT_FILENAME}";
		echo -ne "\t[${tcGREEN}OK${tSTD}]\t" 
		eval_gettext $"Seems you've already demuxed the input to " ; echo "${WORKDIR}"

	else ### DEMUX TO .M2V  .MP2  .SUP ###################

		status_ok
		eval_gettext $"Demuxing input to " ; echo "${WORKDIR}"

		$(java-config -J) -Xms32m -Xmx512m -cp $(java-config -p projectx,jakarta-oro-2.0,commons-net) \
net.sourceforge.dvb.projectx.common.Start -ini "${LIBDIR}/X.ini" -out "${WORKDIR}" -name "${OUTPUT}" "${INPUT}";
		DEMUXED="${WORKDIR}"/"${INPUT_FILENAME}";
	fi
}


status_ok() {
	echo -ne "  [${tcGREEN}OK${tSTD}]\t" 
}

status_warn() {
	echo -ne "  [${tBOLD}${tcYELLOW}!!${tSTD}]\t" 
}

status_err() {
	echo -ne "  [${tBOLD}${tcRED}!!${tSTD}]\t" 
}

errmsg () {
        echo -e "${tcRED}$1${tSTD}"
}



